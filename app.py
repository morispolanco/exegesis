import streamlit as st
import google.generativeai as genai
import os
# Ya no necesitamos python-dotenv expl√≠citamente aqu√≠ si usamos st.secrets

# --- Configuraci√≥n Inicial y Carga de API Key ---

# Configuraci√≥n de la p√°gina de Streamlit
st.set_page_config(page_title="Ex√©gesis B√≠blica con Gemini", page_icon="‚úùÔ∏è", layout="wide")

st.title("üìú Aplicaci√≥n de Ex√©gesis B√≠blica con IA")
st.caption("Generada usando Google Gemini 1.5 Flash")

# Variable global para saber si la API est√° configurada
api_configured = False
gemini_api_key = None # Variable para almacenar la clave

# --- Funciones de la L√≥gica Principal (Adaptadas) ---

def configurar_api(api_key_to_configure):
    """Configura la API de Gemini con la clave proporcionada."""
    global api_configured
    if not api_key_to_configure:
        # Este caso no deber√≠a ocurrir si llamamos correctamente, pero por seguridad
        st.error("‚ùå No se proporcion√≥ una clave API para configurar.")
        api_configured = False
        return False
    try:
        genai.configure(api_key=api_key_to_configure)
        # Peque√±a prueba para verificar la clave (opcional pero √∫til)
        # _ = genai.list_models()
        api_configured = True
        return True # √âxito
    except Exception as e:
        st.error(f"‚ùå Error al configurar la API de Gemini con la clave proporcionada: {e}")
        api_configured = False
        return False

def construir_prompt(libro, capitulo):
    """Construye el prompt detallado para la API de Gemini."""
    # (Misma funci√≥n que antes - sin cambios)
    prompt = f"""
    **Tarea:** Realiza una ex√©gesis acad√©mica exhaustiva del cap√≠tulo {capitulo} del libro de {libro}.

    **Instrucciones Obligatorias:**

    1.  **Enfoque Metodol√≥gico:** Utiliza principalmente un enfoque hist√≥rico-cr√≠tico y/o hist√≥rico-gramatical. Considera el contexto original del texto.
    2.  **Contextualizaci√≥n:**
        *   **Hist√≥rico-Cultural:** Describe el trasfondo hist√≥rico y cultural relevante para entender el cap√≠tulo (√©poca, audiencia original, costumbres, situaci√≥n pol√≠tica/social si aplica).
        *   **Literario:** Analiza el lugar del cap√≠tulo dentro del libro completo y su relaci√≥n con los cap√≠tulos circundantes. Identifica el g√©nero literario predominante del cap√≠tulo (narrativa, poes√≠a, ley, profec√≠a, ep√≠stola, etc.).
    3.  **An√°lisis del Texto:**
        *   **Estructura:** Describe la estructura interna del cap√≠tulo, identificando secciones o unidades de pensamiento principales.
        *   **Contenido:** Resume el contenido principal del cap√≠tulo.
        *   **An√°lisis Detallado:** Examina vers√≠culos, frases o palabras clave que sean cruciales para la interpretaci√≥n. Si es pertinente, menciona t√©rminos importantes en el idioma original (hebreo/arameo/griego), explicando su significado y relevancia en el contexto. Analiza aspectos gramaticales o sint√°cticos notables si afectan significativamente la interpretaci√≥n.
    4.  **Temas Teol√≥gicos:** Identifica y discute los principales temas teol√≥gicos o doctrinales que surgen del texto. ¬øQu√© revela el cap√≠tulo sobre Dios, la humanidad, la salvaci√≥n, la alianza, etc.?
    5.  **FUENTES ACAD√âMICAS (IMPRESCINDIBLE Y CR√çTICO):**
        *   **CITA OBLIGATORIA:** **DEBES** citar fuentes acad√©micas *verificables* para respaldar tus an√°lisis, interpretaciones y afirmaciones sobre el contexto hist√≥rico o ling√º√≠stico.
        *   **Tipos de Fuentes Aceptables:** Comentarios b√≠blicos cr√≠ticos reconocidos (ej. series como Anchor Yale Bible, Hermeneia, NICNT/NICOT, Word Biblical Commentary), art√≠culos de revistas acad√©micas especializadas (ej. Journal of Biblical Literature, New Testament Studies, Vetus Testamentum, Catholic Biblical Quarterly), monograf√≠as acad√©micas publicadas por editoriales universitarias o acad√©micas de prestigio (ej. Eerdmans, Brill, Mohr Siebeck, Oxford University Press, Cambridge University Press).
        *   **Tipos de Fuentes a EVITAR (a menos que se usen cr√≠ticamente y se se√±ale):** Fuentes puramente devocionales, sermones sin base acad√©mica, sitios web no acad√©micos, comentarios populares sin rigor cr√≠tico.
        *   **Formato de Citas:** Usa un formato claro y consistente en el texto (ej. Apellido, A√±o, p. X) y proporciona una bibliograf√≠a breve al final con las referencias completas de las fuentes citadas. **La verificabilidad de las fuentes es esencial.**
    6.  **Lenguaje y Tono:** Mant√©n un lenguaje claro, objetivo y acad√©mico.
    7.  **Extensi√≥n:** Proporciona un an√°lisis razonablemente detallado, no una simple descripci√≥n superficial.

    **Texto a Analizar:** {libro} {capitulo}

    **Idioma de la Respuesta:** Espa√±ol
    """
    return prompt

def generar_exegesis(libro, capitulo):
    """Llama a la API de Gemini para generar la ex√©gesis. Asume que la API ya est√° configurada."""
    if not api_configured:
         # Este chequeo es una segunda capa de seguridad. La configuraci√≥n debe hacerse antes.
         st.error("Error interno: La funci√≥n generar_exegesis fue llamada sin que la API estuviera configurada.")
         return None

    try:
        # Ya no necesitamos configurar el modelo aqu√≠ si genai est√° configurado globalmente
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        prompt_texto = construir_prompt(libro, capitulo)

        generation_config = genai.GenerationConfig(
            temperature=0.6,
        )
        safety_settings = [
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        ]

        with st.spinner(f'ü§ñ Analizando {libro} {capitulo}... Esto puede tardar unos momentos...'):
            response = model.generate_content(
                prompt_texto,
                generation_config=generation_config,
                safety_settings=safety_settings
            )

        if response.parts:
            return response.text
        else:
            try:
                feedback = response.prompt_feedback
                block_reason = feedback.block_reason if feedback else "No especificada"
                st.error(f"Error: La API no devolvi√≥ contenido. Posible raz√≥n: {block_reason}.")
                return None
            except Exception as feedback_err:
                 st.error(f"Error: La API no devolvi√≥ contenido y no se pudo obtener feedback adicional: {feedback_err}")
                 return None

    except Exception as e:
        st.error(f"‚ùå Error durante la generaci√≥n con la API de Gemini: {e}")
        return None

# --- Sidebar para Configuraci√≥n y Ayuda ---
with st.sidebar:
    st.header("Configuraci√≥n de API Key")

    # Instrucciones claras sobre st.secrets
    st.markdown("""
    La forma recomendada y segura de configurar tu API Key de Google (Gemini) es usando los **Secretos de Streamlit**:
    1.  **Localmente:** Crea un archivo `.streamlit/secrets.toml` y a√±ade `GEMINI_API_KEY = "TU_CLAVE"`.
    2.  **Desplegado (Streamlit Community Cloud):** Pega el contenido de tu `secrets.toml` en la configuraci√≥n de Secretos de tu aplicaci√≥n.
    """)
    st.markdown("---")

    # Intentar obtener la clave de st.secrets
    try:
        gemini_api_key = st.secrets.get("GEMINI_API_KEY")
    except Exception as e:
         st.warning(f"No se pudo leer st.secrets (puede ser normal si no est√° configurado): {e}")
         gemini_api_key = None

    # Input manual como *alternativa* si no se encuentra en secrets
    api_key_input_manual = st.text_input(
        "O introduce tu API Key manualmente (menos seguro):",
        type="password",
        help="Es preferible usar st.secrets.",
        key="manual_api_key" # A√±adir una clave √∫nica para el widget
    )

    # Bot√≥n expl√≠cito para intentar configurar si se usa la entrada manual
    if api_key_input_manual and not gemini_api_key: # Mostrar solo si no hay secreto y hay texto
        if st.button("Configurar con clave manual"):
            if configurar_api(api_key_input_manual):
                st.success("‚úÖ API Key configurada manualmente.")
                gemini_api_key = api_key_input_manual # Guardar la clave que funcion√≥
            else:
                # El error ya se muestra en configurar_api
                pass
    elif gemini_api_key and not api_configured:
         # Si la clave se encontr√≥ en secrets, intentar configurar autom√°ticamente
         if configurar_api(gemini_api_key):
              st.success("‚úÖ API Key cargada y configurada desde st.secrets.")
         else:
              # El error ya se muestra en configurar_api
              st.warning("Clave encontrada en st.secrets, pero fall√≥ la configuraci√≥n.")
    elif api_configured:
        st.success("‚úÖ API Key ya configurada.") # Indicar que ya est√° lista
    else:
        st.info("Esperando configuraci√≥n de API Key...")


    st.markdown("---")
    st.subheader("Instrucciones de Uso")
    st.markdown("""
    1.  Aseg√∫rate de que la **API Key est√© configurada** (preferiblemente v√≠a `st.secrets`).
    2.  Escribe el **Libro** y **Cap√≠tulo**.
    3.  Haz clic en **"Generar Ex√©gesis"**.
    """)
    st.markdown("---")
    st.warning("""
    **Importante:** La IA es una herramienta. Verifica siempre las fuentes y consulta m√∫ltiples recursos acad√©micos.
    """)


# --- Interfaz Principal de Streamlit ---

# Columnas para los inputs
col1, col2 = st.columns(2)

with col1:
    libro_input = st.text_input("Libro de la Biblia:", placeholder="Ej. G√©nesis", key="libro")

with col2:
    capitulo_input = st.number_input("Cap√≠tulo:", min_value=1, step=1, format="%d", placeholder="Ej. 1", key="capitulo")

# Bot√≥n para iniciar la generaci√≥n, deshabilitado si la API no est√° configurada
generar_btn = st.button(
    "‚ú® Generar Ex√©gesis ‚ú®",
    type="primary",
    use_container_width=True,
    disabled=not api_configured # El bot√≥n se activa solo si api_configured es True
)

# --- L√≥gica de Ejecuci√≥n al Presionar el Bot√≥n ---
if generar_btn:
    # Validaciones de entrada (la API ya debe estar configurada para que el bot√≥n est√© activo)
    if not libro_input:
        st.warning("‚ö†Ô∏è Por favor, introduce el nombre del libro.")
    elif not capitulo_input or capitulo_input < 1:
        st.warning("‚ö†Ô∏è Por favor, introduce un n√∫mero de cap√≠tulo v√°lido (mayor que 0).")
    else:
        # Llamar a la funci√≥n de generaci√≥n
        resultado = generar_exegesis(libro_input.strip(), int(capitulo_input))

        if resultado:
            st.subheader(f"üìñ Ex√©gesis de {libro_input.strip()} {capitulo_input}")
            st.markdown("---")
            st.markdown(resultado, unsafe_allow_html=True) # Usar markdown para formato
            st.success("‚úÖ Ex√©gesis generada con √©xito.")
        # Los errores durante la generaci√≥n ya se muestran dentro de generar_exegesis
